
Design Goals & Notes

1] Build web pages 100% in C# without Razor/Mvc/ASP
		writer-based, no direct access to "Response" or other web server stuff
2] Create re-usable html/javascript snippet library in C#
3] Build web sites with a "component" philosophy
4] Provide fluent interfaces
5] Advanced features
		"Modules"
			Type/Alias
			Set of integrated Components (custom renderers)
			Optional JavaScript (code-generated)
				javascript "module" pattern
				hide shit from global scope
				register alias for module so dependent modules can use the alias
				register script dependencies
					throw error if script hasn't been added
					implementor controls ordering of scripts
					allow implementor to change script location/filename
		JQuery support/integration
			treat jquery as just another module
		Namespacing/aliasing for css classes used programmatically in script
		Namespacing of ids for nested elements
			integration with ajax calls	
6] More complicated libaries can build on paraquery
		ParaTables


--[todo]

	remember, we're not replacing a web server or mvc in this project, just creating
	a generation library with a focus on building components

	rework

		go back to using fragment terminology
		IPage -> IFragment
		rename MvcFragment to Fragment (after all cleanup)

		support for expando objects in attributes/properties would be nice

		in af, let's access the actual parameters used in the finish function (for selecting)

		Marker/Renderers/RendererStacks
			in constructors, make containermode before linemode
			IRenderer should derive from IMarker and that's what builders return/close, e.g., Close(marker)
			always fire events in renderer (so derived classes don't forget to call base)
				_OnBegin
				OnBegin
			move opening/closing events to IRenderer and implement explicitly?
			derive Renderer from abstract Marker? implmenet events there?
			the idea being that markers are IRenderers that don't render anything, but Renderers provide a
				base for actual rendering
			perhaps (make these changes last)
				RenderStack (renders content)
				Content (marker, empty content), implements IContent (modes, open, close, events)
				IContent derives from IMarker
				Renderer (simply derives from Content)
				move linemode from IContent to Renderer, and remove linemode from rendererstack (it is specific to the renderer pattern)


		reconceptualize non-fluent and fluent modes
			rename ifluentwriter, fluentwriter, fluentrendererstack, etc
			colapse fluentwriter and fluentrendererstack
			CloseUpIfTopNotMultipleLine should not exist. WriteLine() etc should only be avalible in multiline context

		there is a problem with br under span, a problem with None under Inline
			perhaps none (empty) should be seperated from inline/block? yes.

		move Render from page to fragment for context checking

		content/components
			IClosable (for closing)
			IContent:IClosable (for With(), developers)
			IStackContent:IContent (for ContentStack)
			IComponent:IClosable (for Using, developers)


		renderstacks & linemode
			currently have implicit containermode=block, and you can set the linemode
			is this really neccessary?
			or shouldn't it really be checking the Top's linemode (and ignoring the mode of the rstack?)
			or just skip it altogether and leave it to the dev?
			use case is basically creating a custom component (inline) and wanting to restrict it to certain content
			see builderbase OnBeforeNewLine for ideas
			rename CloseUp to CloseInlines(), other changes? is this important?

	tags
		tagtype is too constrictive, esp with improved linemode system
		expand builder to allow for direct tag creation

	grids
		similar to how we plan on doing namespacing (Class="[foo]"), let's add some syntax that means "don't merge"
			Class="!foo" (this would override all classes)
			Class="!!foo" (escapes)
			or just let that be changed in the context

	review html encoding/raw strings

	fix meta tag should be <meta blah>

	fluent system
		do i need to pass context in the constructor
		see if i really need <C> on everything

	documentation review
	re-test nested rendererstacks
	review grids/CloseGrid()
		column classes do not nest (need to fix)

	
	stylebase and dynamic
	flesh out style.background
	inline and external style sheet
	replace ivaluecontainer with a simple [Hide] attribute

	public string prop {private set; get;}
	or
	public string prop {get;}

	remove all junk from paralib-mvc
	rewrite ttb
		packages
		scripts
		components
		etc


	grids
		bootstrap (container, row, col, nestable, multiple breaks)
		skeleton (container, row, col, not nestable, one break)
		simplegrid (container, row, col, not nestable, one break)
		foundation  (row, col, nestable, x break?)
		uikit (skipped)
		960 (not responsive, alpha/omega columns no actual rows)
		unsemantic
		beauter (rows, cols, not nestable?)
		milligram (rows, cols, column, not nestable)
		furtive (grid, row, col)

		
	autocomplete
		Autocomplete.js
			https://www.devbridge.com/sourcery/components/jquery-autocomplete/
		Awesomplete
			https://leaverou.github.io/awesomplete/
		EasyAutocomplete
			http://easyautocomplete.com/
		Flexselect
			http://rmm5t.github.io/jquery-flexselect/
		Ajax Autocomplete for jQuery
			https://www.devbridge.com/sourcery/components/jquery-autocomplete/


	fluent css inline/external

	start converting ttb
		move pQuery into paramvc
		FluentGridExtensions are broken (no write methods on IColumn), will will break admin screens
		remove UrlPrefix() from context
		refactor pQuery.Ajax() calls to do url resolution outside
		clean up cruft
		once razor is gone
			remove paraviews, etc
			re-org project to logically group controllers, pages, fragments

	lets spell check
		https://ewsoftware.github.io/VSSpellChecker/html/027d2fbc-7bfb-4dc3-b4f5-85f95fcf7629.htm

	attribute builder
		dom events

	style should be able to be used for programmatic style sheets
	programmatic external javascript
	caching options

	remove Writer from Renderer, don't clutter

	standalone, fluent writer?
	standalone, fluent jswriter?
		using (var js=new FluentJs(context))
		{
			js
			._("this is a line")
			._()
			.Snippet(script)
			._()
				.If("v==foo")
					._("something").Write(" more")
					._($"really {how} it should be done")
				.Else()
					._($"really {how} it should be done")



		}

		

	when we flesh out HtmlBuilder/FluentHtml, let's split into several partials:
		https://www.w3schools.com/tags/ref_byfunc.asp
		BasicHTML
		Formatting
		Forms and Input
		Frames
		Images
		Audio / Video
		Links
		Lists
		Tables
		Styles and Semantics
		Meta Info
		Programming

	we could enforce compliance, such as HTML41 with or without frames, HTML5, etc
	on tags and attributes and values (not sure about the value)

	also make sure to explore other fluent options
	
			/// <summary>
            /// HTML5
            /// </summary>
			
			[EditorBrowsable(EditorBrowsableState.Never)]
            
			[Obsolete("Stop using this. Really. It's old.")]

	        [Description("My extra helpful description")]
	
	
	
	
	
	can we define javascript functions in c#

		Function(name, new {foo=4});

		public class Module
		{
			[CodeOptions(Validate|Default|Required)]
			public void Encrypt([Default("1")]number n, array a, [Required]date d, regex e, math m, json j, string, boolean, object) //object means no data type
			{
				//parms should all be nullable so we can call MethodInfo.Invoke easily
				//parameters can be validated for type and required
				//default values can be set
				//when generating call statements, can be validated
				//picks up module name/alias

				//https://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/
				//https://stackoverflow.com/questions/13926213/checking-the-types-of-function-arguments-in-javascript

				j("this is a line;")
				j("this is a line fragment")
				n(); //new line
				s(); //space

				b("if (foo==5)")
					.j("do this; //comment")
					.j("and this;")

				c()
				.w("some comments")

				call()

			} 

		}


	expression trees
		https://blogs.msdn.microsoft.com/charlie/2008/01/31/expression-tree-basics/
		https://blogs.msdn.microsoft.com/csharpfaq/2010/01/06/getting-information-about-objects-types-and-members-with-expression-trees/
		https://blogs.msdn.microsoft.com/csharpfaq/2010/03/11/how-can-i-get-objects-and-property-values-from-expression-trees/


	fluent interfaces could throw if you call writeline/newline with an inline on top, or write/writeline/newline with line on top



	better formatting for attribute names, underscores, etc
		design goals
			keep in mind, you can always drop into _writer.Write() or just use the Attributes object
			we are building components, not making razor great again
			so maybe remove the backgroundColor type properties, everything mixed case, simplified
			regardless, make it consistent, any string properties need to be lower case (id, class, title)
		data- 
			can be a collection, or just jam them in the additional
		review case sensitivity (only id and class?, quirks mode?)
		provide fluent support for iso language codes? probably not worth it
		reify "shorthand properties"? or avoid them altogether? ordering issues?
			Style.Background.Color=""
			Style.BackgroundColor=""
			Style.backgroundColor=""
			Style.Background(b=>b.Color="")
			Style.background=""
		merge? like for style and additional = new {style="foo"}?
			simple concat instead of parse?
		other html5 things
		style
		review use of mixed and lower case in attribute properties


	scrap templating/snippet support in favor of 100% generated
		more use of <Action> syntax
		reflection to do substitutions, attribute to override '{_FooBar_}' => 'whatever'
		reusable js functions, c# settings => json => function

	script management
	built in onready

	grids
		make container->rowset, create packages for different grid systems, create "new" methods, interfaces, based on grid
		remove bootstrap from pQuery (remove pQuery!) and make bootstrap a seperate module/dll
		lets support some other grid systems

	make debug a config option





