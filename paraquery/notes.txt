
Design Goals & Notes

1] Build web pages 100% in C# without Razor/Mvc/ASP
		writer-based, no direct access to "Response" or other web server stuff
2] Create re-usable html/javascript snippet library in C#
3] Build web sites with a "component" philosophy
4] Provide fluent interfaces
5] Advanced features
		"Modules"
			Type/Alias
			Set of integrated Components (custom renderers)
			Optional JavaScript (code-generated)
				javascript "module" pattern
				hide shit from global scope
				register alias for module so dependent modules can use the alias
				register script dependencies
					throw error if script hasn't been added
					implementor controls ordering of scripts
					allow implementor to change script location/filename
		JQuery support/integration
			treat jquery as just another module
		Namespacing/aliasing for css classes used programmatically in script
		Namespacing of ids for nested elements
			integration with ajax calls	
6] More complicated libaries can build on paraquery
		ParaTables


--[todo]

	remember, we're not replacing a web server or mvc in this project, just creating
	a generation library with a focus on building components

	create some components to be used int ttb
		Page
		Page[TModel]
			OnPreamble
			OnHead
			OnBody
		View
		View[TModel]

	start converting ttb
		remove UrlPrefix() from context
		refactor pQuery.Ajax() calls to do url resolution outside
		clean up cruft


	better formatting for attribute names, underscores, etc
		design goals
			keep in mind, you can always drop into _writer.Write()
			we are building components, not making razor great again
			so maybe remove the backgroundColor type properties, everything mixed case, simplified
			regardless, make it consistent, any string properties need to be lower case (id, class, title)
		data- 
			can be a collection, or just jam them in the additional
		review case sensitivity (only id and class?, quirks mode?)
		reify "shorthand properties"? or avoid them altogether? ordering issues?
			Style.Background.Color=""
			Style.BackgroundColor=""
			Style.backgroundColor=""
			Style.Background(b=>b.Color="")
			Style.background=""
		merge? like for style and additional = new {style="foo"}?
			simple concat instead of parse?
		other html5 things
		style
		review use of mixed and lower case in attribute properties


	scrap templating/snippet support in favor of 100% generated
		more use of <Action> syntax
		reflection to do substitutions, attribute to override '{_FooBar_}' => 'whatever'
		reusable js functions, c# settings => json => function

	script management
	built in onready

	lets support some other grid systems
	make universal if possible, don't tie to bootstrap
	fold fluentgrid into fluenthtml?
	refactor SetClasses

	make debug a config option





